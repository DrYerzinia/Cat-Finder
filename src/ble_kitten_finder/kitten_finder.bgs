# Kitten Finder V1 Firmware
#
# Allows naming of collar over BLE, connecting to collar causes it to beep
# and flash its red led every 3 seconds for 1/3 of a second to assist in
# locating it.  Advertisment name contains cat's name followed by battery
# percentage.
#
# Author: Michael Marques <DrYerzinia@gmail.com>
# Jan 31st 2015

dim read_result
dim port
dim data
dim state
dim bat_pct
dim name_end
dim sr_data(20) # custom scan response data (friendly name for active scanning)
dim psLength
dim psResult
dim cat_name(18)
dim i
dim len

# Boot event listener
event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)
	state = 0
	
	# configure P1.6 and P0.7 as output
	call hardware_io_port_write(1, $40, 0)
	call hardware_io_port_write(0, $90, 0)
	call hardware_io_port_config_direction(1, $40)
	call hardware_io_port_config_direction(0, $90)

	call flash_ps_load($8000)(psResult, psLength, cat_name(0:18))

	if cat_name(0:1) = 0
		cat_name(0:1) = 7	# len
		cat_name(1:1) = $55	# 'U'
		cat_name(2:1) = $6E	# 'n'
		cat_name(3:1) = $6B	# 'k'
		cat_name(4:1) = $6E	# 'n'
		cat_name(5:1) = $6F	# 'o'
		cat_name(6:1) = $77	# 'w'
		cat_name(7:1) = $6E	# 'n'
		call flash_ps_save($8000, 18, cat_name(0:18))
	end if

	# Set Advertisement cats name
	sr_data(0:1) = $13	# ad field length = 19 bytes (0x13)
	sr_data(1:1) = gap_ad_type_localname_complete	 # ad field type = 0x09 (Complete local name)

	i = 0
	len = cat_name(0:1)
	while i < len
		sr_data(2 + i:1) = cat_name(1 + i:1)
		i = i + 1
	end while
	sr_data(i + 2:1) = $20 # ' '
	sr_data(i + 3:1) = $3f # '?'
	sr_data(i + 4:1) = $3f # '?'
	sr_data(i + 5:1) = $3f # '?'
	name_end = i + 2

	# write custom device name to local GATT attribute
	call attributes_write(c_device_name, 0, 18, sr_data(2:18))

	# set advertisement interval to 10.24 seconds, channel 39
	# units for min max 625 uS
	call gap_set_adv_parameters($200, $200, $04)

	# System started, enable advertising and allow connections
	call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)

	#call hardware_set_soft_timer(30000, 1, 0)
	# Check battery voltage every 30 seconds, and right away
	#call hardware_set_soft_timer(30000, 2, 0)

end

#Timer event listener toggles LED if xgatt_led_value is > 0
event hardware_soft_timer(handle)

	# Finish flashing LED to indicate low battery
	if handle = 3 then
		call hardware_io_port_write(1, $40, 0)
		call hardware_set_soft_timer(900000, 2, 0)
	end if

	# Initate a battery voltage measurment
	if handle = 2 then
		call hardware_adc_read(15, 3, 0)
	end if

	# blink and beep when connected to help user find collar
	if handle = 1 then
		if state then
			# Turn on LED and WAKE
			call hardware_io_port_write(1, $40, $40)
			call hardware_io_port_write(0, $10, $10)
			call hardware_timer_comparator(1, 0, 6, 8000)
			call hardware_timer_comparator(1, 3, 6, 4000)
			state = 0
			call hardware_set_soft_timer(10000, 1, 0)
		else
			# Turn off LED and WAKE
			call hardware_io_port_write(1, $50, 0)
			call hardware_io_port_write(0, $10, 0)
			call hardware_timer_comparator(1, 3, 1, 0)
			state = 1
			call hardware_set_soft_timer(150000, 1, 0)
		end if
	end if

end

# Measures battery voltage and updates advertisment text to reflect current
# percentage as well as blinking led if it is below 20%
event hardware_adc_result(input, value)

	if input = 15 then

		bat_pct = (value - 17616) * 100 / (23342 - 17616)

		# enforce 0%/100% bounds
		if bat_pct > 100 then
			bat_pct = 100
		end if
		if bat_pct < 0 then
			bat_pct = 0
		end if

	if bat_pct < 20 then
			call hardware_io_port_write(1, $40, $40)
			call hardware_set_soft_timer(5000, 3, 0)
	end if

	# Set Advertisement Battery Voltage
	sr_data(name_end + 1:1) = (bat_pct / 100) + 48
		sr_data(name_end + 2:1) = (bat_pct / 10) + (bat_pct / -100 * 10) + 48
		sr_data(name_end + 3:1) = bat_pct + (bat_pct / 10 * -10) + 48
		call gap_set_adv_data(1, 20, sr_data(0:20))

	end if
end
	
# Gets changes to GATT attributes
# Changes cats name if updated
event attributes_value(connection, reason, handle, offset, value_len, value)
	if handle = xgatt_led then
		#xgatt_led_value = value(0:1)
	end if
	if handle = xcat_name then
		call flash_ps_save($8000, value_len, value(0:value_len))
	cat_name(0:value_len) = value(0:value_len)
		i = 0
		len = cat_name(0:1)
		while i < len & i < value_len
			sr_data(2 + i:1) = cat_name(1 + i:1)
			i = i + 1
		end while
		sr_data(i + 2:1) = $20 # ' '
		sr_data(i + 3:1) = $3f # '?'
		sr_data(i + 4:1) = $3f # '?'
		sr_data(i + 5:1) = $3f # '?'
		name_end = i + 2
		while i < 16
			sr_data(2 + i:1) = $20 # ' '
			i = i + 1
	end while
	end if
end

# Starts beeping and flashing when connected to assist in locating collar on
# connection
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
	# Device is connected.
	if (flags & $05) = $05 then
		state = 1
		call hardware_set_soft_timer(30000, 1, 0)
	end if
end

# Stops beeping and flashing on disconnect
event connection_disconnected(handle, result)
	call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
	call hardware_set_soft_timer(0, 1, 0)
	call hardware_io_port_write(1, $40, 0)
	call hardware_io_port_write(0, $90, 0)
	call hardware_timer_comparator(1, 3, 1, 0)
	state = 1
	call hardware_set_soft_timer(30000, 2, 0)
end

