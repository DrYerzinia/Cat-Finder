# Modified from an excellent example:
# http://blog.bluetooth-smart.com/2012/09/16/programming-the-ble112-using-bgscript/
# Added support for changing the LED toggle state via the GAP
#
# This example script will flash an LED connected to P0.7 every second
dim read_result
dim port
dim data
# LED Toggle Control. 0x00 = Always on. 0x01 = Toggle. Set via GATT
dim state
dim bat_pct

# Boot event listener
event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)
  state = 0

  # set all GPIO pins to input/high (pull), except P1_0 and P1_1 to output HIGH (no internal pull-ups)
  # P1_0/1 will leak current if not externally pulled or set as outputs
  call hardware_io_port_config_direction(0, $0)
  call hardware_io_port_write(0, $ff, $ff)
  call hardware_io_port_config_direction(1, $47)
  call hardware_io_port_write(1, $ff, $00)
  call hardware_io_port_config_direction(2, $0)
  call hardware_io_port_write(2, $ff, $ff)
  
  # configure P1.0 and P1.3 as output
  call hardware_io_port_config_direction(1, 9)

  # Disable P1.0 pin. Parameters: I/O port to write to 0/1/2,
  #                               bitmask of pins to modify,
  #                               bitmask of pin values to set
  call hardware_io_port_write(1, 1, 0)  

  # System started, enable advertising and allow connections
  call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)

  # set advertisement interval to 1-2 seconds, all three channels
  # units for min max 625 uS
  call gap_set_adv_parameters(1600, 3200, 7)

  #call hardware_set_soft_timer(30000, 1, 0)
  # Check battery voltage every 30 seconds
  call hardware_set_soft_timer(900000, 2, 0)

end


#Timer event listener toggles LED if xgatt_led_value is > 0
event hardware_soft_timer(handle)

  if handle = 3 then
    call hardware_io_port_write(1, 1, 0)
    call hardware_set_soft_timer(900000, 2, 0)
  end if

  if handle = 2 then
    call hardware_adc_read(15, 3, 0)
  end if

  if handle = 1 then
    if state then
	  call hardware_io_port_write(1, 1, 1)
      call hardware_io_port_write(1, 8, 8)
      call hardware_timer_comparator(1, 0, 2, 10666)
      state = 0
      call hardware_set_soft_timer(10000, 1, 0)
    else
      call hardware_io_port_write(1, 1, 0)
	  call hardware_io_port_write(1, 8, 0)
	  call hardware_timer_comparator(1, 0, 1, 0)
	  state = 1
	  call hardware_set_soft_timer(150000, 1, 0)
    end if
  end if

end

event hardware_adc_result(input, value)

  if input = 15 then

    bat_pct = (value - 17616) * 100 / (23342 - 17616)

    # enforce 0%/100% bounds
    if bat_pct > 100 then
      bat_pct = 100
    end if
    if bat_pct < 0 then
      bat_pct = 0
    end if

	if bat_pct < 20 then
      call hardware_io_port_write(1, 1, 1)
      call hardware_set_soft_timer(5000, 3, 0)
	end if

  end if
end
  
# GATT event listener
event attributes_value(connection, reason, handle, offset, value_len, value)
  if handle = xgatt_led then
    #xgatt_led_value = value(0:1)
  end if
end

# Connection event listener
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
  # Device is connected.
  if (flags & $05) = $05 then
    state = 1
    call hardware_set_soft_timer(30000, 1, 0)
  end if
end

event connection_disconnected(handle, result)
  call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
  call hardware_set_soft_timer(0, 1, 0)
  call hardware_io_port_write(1, 1, 0)
  call hardware_io_port_write(1, 8, 0)
  call hardware_timer_comparator(1, 0, 1, 0)
  state = 1
  call hardware_set_soft_timer(900000, 2, 0)
end
